// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  active           Boolean           @default(true)
  email            String            @unique
  username         String
  personas         Persona[]
  addresses        Address[]
  groupMemberships GroupMembership[]
  eventCommitments EventCommitment[]
  events           Event[]
}

model Persona {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  bio       String?
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Address {
  id      String  @id @default(uuid())
  name    String
  street  String
  city    String
  state   String
  zip     String
  country String
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  place   Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String? @unique
}

model Group {
  id            String            @id @default(uuid())
  name          String            @unique
  description   String?
  groupMember   GroupMembership[]
  events        Event[]
  groupParent   Group?            @relation("GroupHierarchy", fields: [parentId], references: [id])
  parentId      String?
  groupChildren Group[]           @relation("GroupHierarchy")
}

model GroupMembership {
  id      String                @id @default(uuid())
  role    GroupMembershipRole   @default(MEMBER)
  status  GroupMembershipStatus @default(PENDING)
  group   Group?                @relation(fields: [groupId], references: [id])
  groupId String?
  user    User?                 @relation(fields: [userId], references: [id])
  userId  String?
}

enum GroupMembershipRole {
  ADMIN
  MEMBER
}

enum GroupMembershipStatus {
  PENDING
  APPROVED
  DENIED
}

model Event {
  id                  String               @id @default(uuid())
  name                String
  description         String?
  status              EventStatus          @default(PLANNING)
  draft               Boolean              @default(true)
  date                DateTime?
  minimumGroups       Int?
  minimumParticipants Int?
  publicParticipants  Boolean              @default(false)
  publicAttendees     Boolean              @default(false)
  place               Place?               @relation(fields: [placeId], references: [id])
  placeId             String?
  Group               Group?               @relation(fields: [originatingGroupId], references: [id])
  originatingGroupId  String?
  User                User?                @relation(fields: [userId], references: [id])
  userId              String?
  availableEventDates EventAvailableDate[]
  eventCommitments    EventCommitment[]
  rides               Ride[]
  rideRequests        RideRequest[]
}

model EventAvailableDate {
  id                String           @id @default(uuid())
  Event             Event?           @relation(fields: [eventId], references: [id])
  eventId           String?
  eventCommitment   EventCommitment? @relation(fields: [eventCommitmentId], references: [id])
  eventCommitmentId String?
  date              DateTime?
}

model EventCommitment {
  id                  String               @id @default(uuid())
  going               Boolean              @default(false)
  participating       Boolean              @default(false)
  availableEventDates EventAvailableDate[]
  ride                Ride?                @relation(fields: [rideId], references: [id])
  rideId              String?              @unique
  rideRequest         RideRequest?         @relation(fields: [rideRequestId], references: [id])
  rideRequestId       String?              @unique
  User                User?                @relation(fields: [userId], references: [id])
  userId              String?
  Event               Event?               @relation(fields: [eventId], references: [id])
  eventId             String?
}

enum EventStatus {
  PLANNING
  FINALIZED
  CANCELLED
  LIVE
}

model Place {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     Address?
  events      Event[]
  rides       Ride[]
}

model Ride {
  id              String           @id @default(uuid())
  eventCommitment EventCommitment?
  seats           Int?
  storageSpace    Boolean          @default(true)
  description     String?          @default("No description")
  destination     Place?           @relation(fields: [placeId], references: [id])
  placeId         String?
  Event           Event?           @relation(fields: [eventId], references: [id])
  eventId         String?
}

model RideRequest {
  id                String           @id @default(uuid())
  eventCommitmentId EventCommitment?
  Event             Event?           @relation(fields: [eventId], references: [id])
  eventId           String?
  seats             Int?
  storageSpace      Boolean          @default(false)
}
